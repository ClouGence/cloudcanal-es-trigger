package com.clougence.cloudcanal.es7.trigger;

import java.util.concurrent.atomic.AtomicBoolean;
import java.util.function.Consumer;

import com.clougence.cloudcanal.es_base.CcEsTriggerIdxWriter;
import com.clougence.cloudcanal.es_base.ComponentLifeCycle;
import com.clougence.cloudcanal.es_base.EsTriggerConstant;
import com.clougence.cloudcanal.es_base.TriggerEventType;
import org.apache.commons.lang3.exception.ExceptionUtils;
import org.elasticsearch.index.IndexModule;
import org.elasticsearch.index.engine.Engine;
import org.elasticsearch.index.mapper.ParsedDocument;
import org.elasticsearch.index.shard.IndexingOperationListener;
import org.elasticsearch.index.shard.ShardId;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * @author bucketli 2024/6/26 17:48:55
 */
public class CcEs7IdxOpListener implements IndexingOperationListener, ComponentLifeCycle, Consumer<Boolean> {

    private static final Logger        log    = LoggerFactory.getLogger(CcEs7IdxOpListener.class);

    private static final AtomicBoolean inited = new AtomicBoolean(false);

    private final IndexModule          indexModule;

    private final CcEsTriggerIdxWriter ccEsTriggerIdxWriter;

    public CcEs7IdxOpListener(IndexModule indexModule, CcEsTriggerIdxWriter ccEsTriggerIdxWriter){
        this.indexModule = indexModule;
        this.ccEsTriggerIdxWriter = ccEsTriggerIdxWriter;
    }

    @Override
    public void accept(Boolean cdcEnabled) {
    }

    @Override
    public void start() {
        if (inited.compareAndSet(false, true)) {
            log.info("Component " + this.getClass().getSimpleName() + " start successfully.");
        }
    }

    @Override
    public void stop() {
        if (inited.compareAndSet(true, false)) {
            log.info("Component " + this.getClass().getSimpleName() + " stop successfully.");
        }
    }

    @Override
    public void postDelete(ShardId shardId, Engine.Delete delete, Engine.DeleteResult result) {
        try {
            //            log.info("receive DELETE event.");
            if (delete.origin() != Engine.Operation.Origin.PRIMARY // not primary shard
                || !indexModule.getSettings().getAsBoolean(EsTriggerConstant.IDX_ENABLE_CDC_CONF_KEY, false) // not enable cdc
                || result.getFailure() != null // failed operation
                || !result.isFound()) { // not found
                return;
            }

            String indexName = shardId.getIndex().getName();
            String delId = delete.id();

            if (log.isDebugEnabled()) {
                log.info("[DELETE] " + indexName + " data,pk:" + delId);
            }

            ccEsTriggerIdxWriter.insertTriggerIdx(indexName, TriggerEventType.DELETE, delId, null);
        } catch (Exception e) {
            log.error("Handle DELETE event error,but ignore.msg:" + ExceptionUtils.getRootCauseMessage(e));
        }
    }

    @Override
    public void postIndex(ShardId shardId, Engine.Index index, Engine.IndexResult result) {
        try {
            //            log.info("receive INDEX event.");
            if (index.origin() != Engine.Operation.Origin.PRIMARY // not primary shard
                || !indexModule.getSettings().getAsBoolean(EsTriggerConstant.IDX_ENABLE_CDC_CONF_KEY, false) // cdc not enabled
                || result.getFailure() != null // has failure
                || result.getResultType() != Engine.Result.Type.SUCCESS) { // not success
                return;
            }

            String indexName = shardId.getIndex().getName();
            ParsedDocument doc = index.parsedDoc();

            String docJson = null;
            if (doc != null && doc.source() != null) {
                docJson = doc.source().utf8ToString();
            }

            if (result.isCreated()) {
                if (log.isDebugEnabled()) {
                    log.debug("[INSERT] " + indexName + " data,seq:" + index.getIfSeqNo() + ",ts:" + index.getAutoGeneratedIdTimestamp() + ",ptm:" + index.getIfPrimaryTerm()
                              + ",data:" + docJson);
                }

                ccEsTriggerIdxWriter.insertTriggerIdx(indexName, TriggerEventType.INSERT, index.id(), docJson);
            } else {
                if (log.isDebugEnabled()) {
                    log.debug("[UPDATE] " + indexName + " data,seq:" + index.getIfSeqNo() + ",ts:" + index.getAutoGeneratedIdTimestamp() + ",ptm:" + index.getIfPrimaryTerm()
                              + ",data:" + docJson);
                }

                ccEsTriggerIdxWriter.insertTriggerIdx(indexName, TriggerEventType.UPDATE, index.id(), docJson);
            }
        } catch (Exception e) {
            log.error("Handle INDEX event error,but ignore.msg:" + ExceptionUtils.getRootCauseMessage(e));
        }
    }
}
